package algorithms.core;

import java.awt.Point;
import java.util.LinkedHashMap;

/**
 * Базовый интерфейс состояния игры.
 * <p>
 * Определяет базовый интерфейс состояния игры, позволяющий осуществлять
 * навигацию по графу состояния.
 *
 * @param <T> тип действий, предпринимаемых игроками
 * @see BreadthFirstSearch
 */
public interface IBasicState<T> {

    /**
     * Перечень доступных действий.
     * <p>
     * Возвращает перечень действий, доступных из заданного расположения
     * <code>place</code>, в виде ассоциативного массива упорядоченных пар
     * "расположение в результате действия = действие".
     * <p>
     * Для действий передвижения доступны проходимые клетки лабиринта.
     *
     * @param place расположение
     * @return перечень доступных действий
     */
    public LinkedHashMap<Point, T> getLegalActionsAsMap(Point place);

    /**
     * Перечень доступных действий с учётом типа игрока.
     * <p>
     * Возвращает перечень действий, доступных из заданного расположения
     * <code>place</code>, в виде ассоциативного массива упорядоченных пар
     * "расположение в результате действия = действие".
     * <p>
     * Для действий передвижения доступны проходимые клетки лабиринта, исключая
     * клетки, занятые игроками того же типа, что тип <code>playerId</code>.
     *
     * @param place расположение
     * @param playerId идентификатор игрока
     * @return перечень доступных действий
     */
    public LinkedHashMap<Point, T> getLegalActionsAsMapNoKins(Point place, int playerId);
}
